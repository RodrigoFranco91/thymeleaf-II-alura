Neste capitulo implementamos o serviço de Login do prjeto feito no curso anterior.

O Spring tem um projeto/modulo que facilita todo o serviço de Login (autenticação e validação). Siga o passo a passo:


1) O primeiro passo é adicionar o Spring Security em nosso projeto, então no arquivo pom.xml adicione o trecho:

    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    
Dica: quando queres aprender como implementar o básico de um módulo do Spring, faça uma busca no google "spring guide 
basic autentication"

Dessa forma achamos o site: https://spring.io/guides/gs/securing-web/

2) Vamos criar a classe WebSecurityConfig que deve herdar de WebSecurityConfigurerAdapter. A classe criada deve ainda ser anotada
com @Configuration e @EnableWebSecurity.

3) Na classe WebSecurityConfig devemos sobrescrever o método configure() que recebe HttpSecurity como argumento e deixá-lo assim:

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
		.anyRequest()
		.authenticated()
		.and()
		.httpBasic();
	}
	
4) Ainda na classe WebSecurityConfig Vamos criar um método que vai criar um usuário em memória. Depois vamos trocar isso. 
Veja como ficou:

	@Bean
	@Override
	public UserDetailsService userDetailsService() {
		UserDetails user =
			 User.withDefaultPasswordEncoder()
				.username("joao")
				.password("joao")
				.roles("ADM")
				.build();

		return new InMemoryUserDetailsManager(user);
	}

Atenção: o import a ser usado é o org.springframework.security.core.userdetails.UserDetailsService;

5) Agora ao acessar localhost:8080/home o prórpio navegador vai apresentar um fomulário para login.


Agora vamos criar a página de Login. Siga o passo a passo para isso:

1) Dentro da pasta templates devemos criar o arquivo login.html

2) Agora no método configure() da classe WebSecurityConfig temos que indicar qual a requisição que exibe a página login.html. O 
método configure() ficará assim:

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
		.anyRequest()
		.authenticated()
		.and()
        .formLogin(form -> form
        		//Aqui força uma requisição com path /login e criamos um controller para retornar uma página html
                .loginPage("/login")
                .permitAll()
            );
	}
	
3) Agora temos que criar uma classe chamada LoginController e nela criar (action) um método que exibirá a página login.html. 
Tenha em mente que o mapeamento desse método tem que ser igual o que configuramos no método configure() da classe WebSecurityConfig,
no caso foi "/login". Veja como ficou o metodo da classe LoginController:

	@Controller
	public class LoginController {

		@GetMapping
		@RequestMapping("/login")
		public String login() {
			return "login";
		}

	}

Dessa forma ao acessarmos localhost:8080/login vamos ver a tela de fazer login.


Agora vamos implementar o Logout. Siga o passo a passo:

1) Devemos agora no método configure() da classe WebSecurityConfig mapear o logout. Ficará assim:


	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
		.anyRequest()
		.authenticated()
		.and()
        .formLogin(form -> form
        		//Aqui força uma requisição com path /login e criamos um controller para retornar uma página html
                .loginPage("/login")
                .permitAll()
            )
        .logout(logout -> logout.logoutUrl("/logout"));
	}
	
2) Agora temos que alterar o conteudo HTML, quando usuario estiver logado deve aparecer o link escrito Logout, quando usuario não
estiver logado o link deve ser Login. O Thymeleaf já facilita verificar se um usuário está logado. Veja como vai ficar:

<span class="mt-3">
	<a class="text-light" sec:authorize="!isAuthenticated()" href="/login">login</a>  
	<a onclick="document.querySelector('#form-login').submit()" class="text-light" sec:authorize="isAuthenticated()" 
	href="#">logout</a> 
<form id="form-login" th:action="@{/logout}" method="post"> </form>
</span>

Usamos o trecho sec:authorize="!isAuthenticated() para verificar se usuario está logado. Mas para isso funcionar tivemos que
adicionar a seguinte dependencia:

	<dependency>
	    <groupId>org.thymeleaf.extras</groupId>
	    <artifactId>thymeleaf-extras-springsecurity5</artifactId>
	</dependency>

Outra coisa que fizemos foi criar um <form> com metodo POST e fizemos o link de logout chamar esse <form>. O Spring recomenda que
logout seja feito via POST e se quisessemos fazer tudo dentro do formulário teriamos que usar botão no lugar de link.

























